---
description: 
globs: 
alwaysApply: false
---
[Instructions]

Always follow the workflow below for a refactoring task.
If context is missing or criteria are unclear, stop immediately and ask for clarification before proceeding.

---

[Workflow Steps]

1. Context Analysis
    - Check whether the task includes relevant code (snippet, module, component, or service level).
    - If no code is provided, halt the task and request an explicit reference.
    - Prioritize investigation of the following:
        - Interfaces
        - Input/output behavior
        - Dependencies
    - If necessary, expand the scope to include utility functions and global state.

2. Planning
    - Analyze the gap between the current code and the desired goal.
    - Refer to `todo.md` to understand the specific task requirements.
    - If needed, refer to `log.md` to understand previous progress and context.
    - **Assess task complexity and impact:**
        - If the task scope or impact is deemed large, halt and propose breaking it down into smaller subtasks.
        - If the user agrees to use subtasks, update `todo.md` with the detailed breakdown and wait for user approval before proceeding.
    - Focus on only one goal at a time.
    - If the task involves refactoring, **never include new features in the plan**. Separate refactoring from new functionality.
    - Break the plan into small, sequential steps and share it with the user for confirmation.

3. Execution
    - Implement only one planned step at a time.
    - Preserving existing functionality is a strict rule.
        - If preservation is unclear, consult documents like `log.md` for prior behavior.
    - **During refactoring, do not introduce any new behavior or functionality under any circumstances.**
    - Follow the step-by-step process:
        1. Modify the code
        2. **Commit** the modified code with format of `refactor: [short summary in Korean]`
        3. Record relevant information in log.md by **appending to the end of the file**
        4. Update progress status in todo.md
        5. **Commit** the updated documents with format of `docs: [short summary in Korean]`
        6. Wait for user testing and approval (user reviews rollback decision here)

4. Verification
    - Wait for the user to test and provide feedback/approval.
    - If the user reports a failure or requests rollback, roll back the change and revise the plan.
    - If the goal is achieved and approved by the user, mark the task as complete in `todo.md`.

---

[Core Principles]

- Favor practical improvements over theoretical perfection.
- Surface potential complexity before starting, and report any surprises immediately.
- **Always separate refactoring from new feature development. Never add new functionality during a refactor.**
- For high-risk structural changes, ensure clear separation and rollback capability.

